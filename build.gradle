import javax.net.ssl.HttpsURLConnection
import java.nio.charset.StandardCharsets

plugins {
    // Required for NeoGradle
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

def publishDiscord() {
    try {
        def cfLinks = new StringJoiner('\\n')

        if (project(':fabric').hasProperty('curse_link')) {
            cfLinks.add("[Fabric](${project(':fabric').findProperty('curse_link')})")
        }

        if (project(':forge').hasProperty('curse_link')) {
            cfLinks.add("[Forge](${project(':forge').findProperty('curse_link')})")
        }

        if (project(':neoforge').hasProperty('curse_link')) {
            cfLinks.add("[NeoForge](${project(':neoforge').findProperty('curse_link')})")
        }
        def modrinthLinks = new StringJoiner('\\n')

        if (project(':fabric').hasProperty('modrinth_link')) {
            modrinthLinks.add("[Fabric](${project(':fabric').findProperty('modrinth_link')})")
        }

        if (project(':forge').hasProperty('modrinth_link')) {
            modrinthLinks.add("[Forge](${project(':forge').findProperty('modrinth_link')})")
        }

        if (project(':neoforge').hasProperty('curse_link')) {
            modrinthLinks.add("[NeoForge](${project(':neoforge').findProperty('modrinth_link')})")
        }
        println(cfLinks)
        println(modrinthLinks)
        def changelog = file("CHANGELOG_LATEST.md").getText()
        changelog = changelog.substring(changelog.indexOf("##"))
        changelog = changelog.replaceAll("\n", "\\\\n")

        if (changelog.length() >= 1024) {
            changelog = changelog.substring(0, 924)
            changelog = changelog + "...[(See more)](${changelog_link})"
        }
        println(changelog)
        int color = 65392

        if (release_type == "beta") {
            color = 16763904
        } else if (release_type == "alpha") {
            color = 16724273
        }
        final String message = """
            {
              "embeds": [
                {
                  "title": "${mod_name} ${version}",
                  "color": ${color},
                  "fields": [
                    {
                      "name": "Minecraft Versions",
                      "value": "${release_versions.replaceAll(",", ", ")}"
                    },
                    {
                      "name": "CurseForge",
                      "value": "${cfLinks}",
                      "inline": true
                    },
                    {
                      "name": "Modrinth",
                      "value": "${modrinthLinks}",
                      "inline": true
                    },
                    {
                      "name": "Changelog",
                      "value": "${changelog}"
                    }
                  ],
                  "thumbnail": {
                    "url": "${discord_thumbnail}"
                  }
                }
              ]
            }
            """
        println(message)
        final URL url = URI.create("${discordWebhook}").toURL()
        final HttpsURLConnection connection = (HttpsURLConnection) url.openConnection()
        connection.addRequestProperty("Content-Type", "application/json; charset=UTF-8")
        connection.addRequestProperty("User-Agent", "${mod_name} Gradle Upload")
        connection.setDoOutput(true)
        connection.setRequestMethod("POST")
        connection.connect()

        try (OutputStream out = connection.getOutputStream()) {
            out.write(message.getBytes(StandardCharsets.UTF_8))
        }
        connection.getInputStream().close()
        connection.disconnect()
    } catch (IOException e) {
        e.printStackTrace()
    }
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}

tasks.register('publishFabric') {
    dependsOn ordered(':fabric:modrinth', ':fabric:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishForge') {
    dependsOn ordered(':forge:modrinth', ':forge:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishNeoForge') {
    dependsOn ordered(':neoforge:modrinth', ':neoforge:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishFabricForge') {
    dependsOn ordered(':forge:modrinth', 'forge:publishCurseForge', ':fabric:modrinth', ':fabric:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishFabricNeoForge') {
    dependsOn ordered(':fabric:modrinth', ':fabric:publishCurseForge', ':neoforge:modrinth', ':neoforge:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishForgeNeoForge') {
    dependsOn ordered(':forge:modrinth', ':forge:publishCurseForge', ':neoforge:modrinth', ':neoforge:publishCurseForge')

    doLast {
        publishDiscord()
    }
}

tasks.register('publishFabricForgeNeoForge') {
    dependsOn ordered(':forge:modrinth', ':forge:publishCurseForge', ':fabric:modrinth', ':fabric:publishCurseForge', ':neoforge:modrinth', ':neoforge:publishCurseForge')

    doLast {
        publishDiscord()
    }
}
